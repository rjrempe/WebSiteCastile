<?php


//CREATE TABLE IF NOT EXISTS `Inquiry` (
//  `id` int(11) NOT NULL AUTO_INCREMENT,
//  `name` varchar(32) NOT NULL,
//  `phone` varchar(32) NOT NULL, 
//  `request` text NOT NULL,
//  `created` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
//  `modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
//  PRIMARY KEY (`id`)
//) ENGINE=InnoDB  DEFAULT CHARSET=utf8;



//  return all records
//  GET /inquiry

//  return a specific record
//  GET /inquiry/{id}

//  create a new record
//  POST /inquiry

//  update an existing record
//  PUT /inquiry/{id}

//  delete an existing record
//  DELETE /inquiry/{id}


class Inquiry{
  
    // database connection and table name
    private $conn;
    private $table_name = "Inquiry";
  
    // object properties
    public $id;
    public $name;
    public $phone;
    public $request;
    public $created;
    public $modified;
  
    // constructor with $db as database connection
    public function __construct($db){
        $this->conn = $db->getConnection();

        $this->id = 0;
        $this->name = "";
        $this->phone = "";
        $this->request = "";
    }
    function insert(){

        $this->id = 0;  // this is auto increment generated by the DB

        // sanitize
        //$this->name = htmlspecialchars(strip_tags($this->name));
        //$this->phone = htmlspecialchars(strip_tags($this->phone));
        //$this->request = htmlspecialchars(strip_tags($this->request));
  
        $sql = "
            INSERT INTO {$this->table_name} 
            SET
            name=:name, phone=:phone, request=:request
        ";
  
        // prepare query
        $stmt = $this->conn->prepare($sql);
  
        // bind values
        $stmt->bindParam(":name", $this->name);
        $stmt->bindParam(":phone", $this->phone);
        $stmt->bindParam(":request", $this->request);
 
        // execute query
        if($stmt->execute()){

            // when using transactions always perform PDO::lastInsertId() before commiting; as committing resets it to ZERO
            //
            $this->id = $this->conn->lastInsertId();
            
            //YYYY-MM-DD                2005-12-26
            //
            //YYYY-MM-DD HH:MI:SS       2005-12-26 23:50:30
            //
            //YYYY-MM-DD HH:MI:SS       2005-12-26 23:50:30
            //

            $mysqltime = date ("Y-m-d H:i:s");

            $this->created = $mysqltime;
    
            $this->modified = $this->created;

            return true;
        }
  
        return false;
    }
    //
    //  select
    //
    function select($whereClause = " "){
        $sql = "
            SELECT id, name, phone, request, created, modified
            FROM {$this->table_name} 
            $whereClause
            ORDER BY
            id DESC
        ";

        try{
            $stmt = $this->conn->prepare($sql);
  
            $stmt->execute();
        } catch (PDOException $e) {
            
            // exit($e->getMessage());   LOG
        }    
        
        return $stmt;    
	}
    //
    //  update
    //
    function update($id){

        // sanitize
        //$this->name = htmlspecialchars(strip_tags($this->name));
        //$this->phone = htmlspecialchars(strip_tags($this->phone));
        //$this->request = htmlspecialchars(strip_tags($this->request));

        $mysqltime = date ("Y-m-d H:i:s");
        
        $this->id = $id;
        $this->modified = $mysqltime;
 
        $sql = "
            UPDATE {$this->table_name} 
            SET name=:name, phone=:phone, request=:request, modified=:modified
            WHERE id = $id
        ";
  
        try {
            $stmt = $this->conn->prepare($sql);

            // bind values
            $stmt->bindParam(":name", $this->name);
            $stmt->bindParam(":phone", $this->phone);
            $stmt->bindParam(":request", $this->request);
            $stmt->bindParam(":modified", $this->modified);
            
            $stmt->execute();
            
            return $stmt->rowCount();
        
        } catch (PDOException $e) {
            
            // exit($e->getMessage());   LOG
            return 0;
        }    
    }
    //
    //  delete
    //
    public function delete($id)
    {
        $sql = "
            DELETE FROM {$this->table_name}
            WHERE id = :id;
        ";

        try {
            $stmt = $this->conn->prepare($sql);
            $stmt->execute(array('id' => $id));
            
            return $stmt->rowCount();
        
        } catch (PDOException $e) {
            
            // exit($e->getMessage());   LOG
            return 0;
        }    
    }
}

?>